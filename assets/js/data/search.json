[ { "title": "Git暂存区的正确理解及其相关操作总结", "url": "/posts/Git-index/", "categories": "技术", "tags": "Git", "date": "2022-01-07 00:00:00 +0800", "snippet": "0 前言使用Git管理代码时，经常会需要重置暂存区（工作区）里的文件，本文将对Git暂存区/工作区的操作做一个总结。1 Git暂存区的错误认识我们都知道Git“三棵树”（工作区、暂存区、版本库）的概念，那么在开始之前，先提一个问题：仓库处于刚 commit 完的状态时，暂存区有没有文件？三秒钟时间回答3…2…1…一定会有人回答：暂存区是空的，没有文件敲黑板！注意，这是错误的！正确答案应该是：暂存区有文件，且内容与版本库一致这是一个非常普遍且深入人心的谬误，许多大V的Git教程也在讲述这个错误的认识。记住，非空仓库暂存区里始终有文件。如果有不清楚的地方，参阅Git官方指导书——《精通Git》7.7 Git 工具 - 重置揭密。正确理解Git暂存区，才能更好地理解后面的相关命令。（可以通过git ls-files查看当前缓存区中的文件）2 Commit级别的操作基本操作git add：添加工作区（Working directory）的文件修改到暂存区（Stage/Index）git commit：提交暂存区的所有文件修改到版本库（Repository/History）git reset（重点）git reset 后跟commit，该命令有三个参数：--soft --mixed --hard。 --soft：使当前分支指向目标commit，将当前版本库替换为目标版本库（保持暂存区、工作区不变） --mixed：使当前分支指向目标commit，将当前版本库替换为目标版本库，并拉取版本库文件到暂存区（保持工作区不变，这是git reset的默认参数） --hard：使当前分支指向目标commit，将当前版本库替换为目标版本库，并拉取版本库文件到暂存区及工作区（慎重！工作区的内容将被覆盖） git checkout除了git reset之外，git checkout也会产生暂存区/工作区的文件替换其效果与git reset --hard相似，不同之处在于： git checkout执行前会检查当前工作区的文件，如果不与版本库完全相同，那么则产生错误而执行失败； git checkout执行后会将HEAD移出当前分支，进入HEAD detached状态（不在任何一个分支上）。 3 文件级别的操作旧命令（不推荐）Git 2.23.0版本之前，文件级别的操作涉及git reset及git checkout两个命令。与前文不同，这节不从命令而从操作目的来讲述。 恢复暂存区文件：用版本库文件替换暂存区文件。使用git reset HEAD file命令。（用git reset commit file实现从指定commit的版本库文件替换暂存区文件） 恢复工作区文件：用暂存区文件替换工作区文件。使用git checkout -- file命令。 恢复暂存区及工作区文件：用指定版本库文件替换暂存区文件，然后用暂存区文件替换工作区文件。使用git checkout commit -- file命令。（上述git checkout命令中--的作用是消除歧义，不建议省略。）新命令（推荐）Git 2.23.0版本之后，引入了新的命令git restore，文件级别的操作只用这一个命令就可以了，新命令比旧命令更清晰便于理解，且可以完全替代旧命令，所以建议使用新命令。 恢复暂存区文件：用版本库文件替换暂存区文件。使用git restore --staged file（或git restore -S file）命令。 恢复工作区文件：用暂存区文件替换工作区文件。使用git restore (--worktree) file（或git restore (-W) file）命令。--worktree是git restore的默认参数。 恢复暂存区及工作区文件：用指定版本库文件替换暂存区文件，然后用暂存区文件替换工作区文件。使用git restore --staged --worktree file（或git restore -S -W file）命令。（如果需要从指定commit恢复，则使用git restore -s commit -S -W file） 4 结语以 Git 的思维框架来理解“三棵树”（工作区、暂存区、版本库），就可以很容易地理解暂存区/工作区的相关命令。Commit级别的操作，git reset命令必须熟练掌握。文件级别的操作，推荐学习并使用新命令git restore。" }, { "title": "CSS3实现元素水平垂直居中", "url": "/posts/CSS3-middle/", "categories": "Web, 前端", "tags": "CSS3", "date": "2021-12-30 00:00:00 +0800", "snippet": "需求“很简单”的需求：页面正中显示一张图片（水平垂直居中），宽度自适应缩放（不同设备均完整显示）。方案由于前端基础薄弱，只能依赖搜索。但能搜索到的多数都是基于CSS2盒子模型的传统Float布局方案（依赖 position float 属性），均没能成功实现需求。询问一位前端朋友得知基于CSS3弹性盒子（Flex Box）模型的Flex布局很容易就能实现。 2009年，W3C 提出了一种新的方案 - Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。代码添加一个&amp;lt;div&amp;gt;作为父元素，&amp;lt;img&amp;gt;也可以是其他需要实现居中的元素：&amp;lt;body&amp;gt; &amp;lt;div class=&quot;outer&quot;&amp;gt; &amp;lt;img class=&quot;inner&quot; src=&quot;img.png&quot;&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;然后定义如下样式表：body { margin:0; }.outer { height:100%; /* 父元素高度充满整个页面 */ display:flex; /* 设置为flex布局 */ justify-content:center; /* 在主轴（水平）上居中 */ align-items:center; /* 在交叉轴（垂直）上居中 */}.inner { max-width:100%; /* 宽度不超过父元素，保证完整显示 */}结语2022年都要到了，快放弃落后的Float布局吧，网页布局首选Flex布局。参考资料：Flex 布局教程：语法篇 - 阮一峰的网络日志" }, { "title": "本站第一篇文章", "url": "/posts/Start-up/", "categories": "生活", "tags": "杂谈", "date": "2021-12-29 00:00:00 +0800", "snippet": "新的起点在2021年的末尾，我奔三的年纪，终于搭起了想做很多年的个人博客。有言道： 觉得为时已晚的时候，恰恰是最早的时候。秉着这种“不怕晚”的精神，总算完成了本站的搭建。没有什么雄心壮志想要把它做大，或达到多少访问量，仅仅希望本站作为自己工作中的技术记录，日后能对自己的职业生涯有个交代，足矣。希望自己能坚持下去。" } ]
